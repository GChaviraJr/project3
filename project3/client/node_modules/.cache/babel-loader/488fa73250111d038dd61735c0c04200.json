{"ast":null,"code":"import _classCallCheck from \"/Users/guadalupechavira/git/project3/project3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/guadalupechavira/git/project3/project3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/guadalupechavira/git/project3/project3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/guadalupechavira/git/project3/project3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/guadalupechavira/git/project3/project3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\nvar modalRoot = document.getElementById('modal-root');\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  function Modal(props) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));\n    _this.el = document.createElement('div');\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // The portal element is inserted in the DOM tree after\n      // the Modal's children are mounted, meaning that children\n      // will be mounted on a detached DOM node. If a child\n      // component requires to be attached to the DOM tree\n      // immediately when mounted, for example to measure a\n      // DOM node, or uses 'autoFocus' in a descendant, add\n      // state to Modal and only render the children when Modal\n      // is inserted in the DOM tree.\n      modalRoot.appendChild(this.el);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      modalRoot.removeChild(this.el);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return ReactDOM.createPortal(this.props.children, this.el);\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nexport default Modal;","map":{"version":3,"sources":["/Users/guadalupechavira/git/project3/project3/client/src/components/Modal/Modal.js"],"names":["React","ReactDOM","modalRoot","document","getElementById","Modal","props","el","createElement","appendChild","removeChild","createPortal","children","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AAEA,IAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAlB;;IAEMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,EAAL,GAAUJ,QAAQ,CAACK,aAAT,CAAuB,KAAvB,CAAV;AAFiB;AAGlB;;;;wCAEmB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,MAAAA,SAAS,CAACO,WAAV,CAAsB,KAAKF,EAA3B;AACD;;;2CAEsB;AACrBL,MAAAA,SAAS,CAACQ,WAAV,CAAsB,KAAKH,EAA3B;AACD;;;6BAEQ;AACP,aAAON,QAAQ,CAACU,YAAT,CACL,KAAKL,KAAL,CAAWM,QADN,EAEL,KAAKL,EAFA,CAAP;AAID;;;;EA3BiBP,KAAK,CAACa,S;;AA8B1B,eAAeR,KAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      this.props.children,\n      this.el,\n    );\n  }\n}\n\nexport default Modal;"]},"metadata":{},"sourceType":"module"}